org: zyskkd
app: attendance-app

service:
  name: serverless-attendance-app

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-offline
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    EVENTS_TABLE: Events-${self:provider.stage}
    ATTENDEES_TABLE: Attendees-${self:provider.stage}
    QR_CODES_TABLE: QrCodes-${self:provider.stage}
    INDEX_NAME: UserIdIndex
    ATTENDEE_ID_INDEX: AttendeeIdIndex
    QR_CODE_ID_INDEX: QrCodeIdIndex
    IMAGES_TABLE: Images-${self:provider.stage}
    IMAGE_ID_INDEX: ImageIdIndex
    IMAGES_S3_BUCKET: serverless-attendance-app-images-${self:provider.stage}

  tracing:
    lambda: true
    apiGateway: true

custom:
  dotenv:
    path: apps/attendance/.env.local
    required:
      file: true
    include:
      - sesSenderEmail
      - SIGNED_URL_EXPIRATION
  serverless-offline:
    httpPort: 3003
    allowCache: true
    useChildProcesses: true
  stage: ${opt:stage, self:provider.stage}
  apiEndpoint:
    dev: https://dev-wtkb-285.eu.auth0.com/.well-known/jwks.json
  dynamodb:
    start:
      port: 8002
      inMemory: true
      migrate: true
    stages:
      - ${opt:stage, self:provider.stage}
  documentation:
    models:
      - name: CreateEventRequest
        contentType: application/json
        schema: ${file(apps/attendance/models/create-event-request.json)}
      - name: CreateAttendeeRequest
        contentType: application/json
        schema: ${file(apps/attendance/models/create-attendee-request.json)}

functions:
  Auth:
    handler: apps/attendance/src/app/lambda/auth/auth0Authorizer.handler
    environment:
      AUTH_0_JWKS_URL: ${self:custom.apiEndpoint.${self:custom.stage}}

  GetEvents:
    handler: apps/attendance/src/app/lambda/http/getEvents.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}/index/${self:provider.environment.INDEX_NAME}
    events:
      - http:
          method: get
          path: events
          cors: true
          authorizer: Auth

  GetEvent:
    handler: apps/attendance/src/app/lambda/http/getEvent.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}/index/${self:provider.environment.INDEX_NAME}
    events:
      - http:
          method: get
          path: events/{eventId}
          cors: true
          authorizer: Auth

  CreateEvent:
    handler: apps/attendance/src/app/lambda/http/createEvent.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
    events:
      - http:
          method: post
          path: events
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new event
            description: Create a new event
            requestModels:
              'application/json': CreateEventRequest

  DeleteEvent:
    handler: apps/attendance/src/app/lambda/http/deleteEvent.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
    events:
      - http:
          method: delete
          path: events/{eventId}
          cors: true
          authorizer: Auth
          documentation:
            summary: Delete an event item
            description: Delete an event item

  GetAttendees:
    handler: apps/attendance/src/app/lambda/http/getAttendees.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ATTENDEES_TABLE}
    events:
      - http:
          method: get
          path: events/{eventId}/attendees
          cors: true
          authorizer: Auth

  GetAttendee:
    handler: apps/attendance/src/app/lambda/http/getAttendee.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ATTENDEES_TABLE}/index/${self:provider.environment.ATTENDEE_ID_INDEX}
    events:
      - http:
          method: get
          path: events/{eventId}/attendees/{attendeeId}
          cors: true
          authorizer: Auth

  CreateAttendee:
    handler: apps/attendance/src/app/lambda/http/createAttendee.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ATTENDEES_TABLE}
    events:
      - http:
          method: post
          path: events/{eventId}/attendees
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new attendee
            description: Create a new attendee
            requestModels:
              'application/json': CreateAttendeeRequest

  GetQrCodes:
    handler: apps/attendance/src/app/lambda/http/getQrCodes.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QR_CODES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
    events:
      - http:
          method: get
          path: events/{eventId}/qrcodes
          cors: true
          authorizer: Auth

  GetQrCode:
    handler: apps/attendance/src/app/lambda/http/getQrCode.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QR_CODES_TABLE}/index/${self:provider.environment.QR_CODE_ID_INDEX}
    events:
      - http:
          method: get
          path: events/{eventId}/qrcodes/{qrCodeId}
          cors: true
          authorizer: Auth

  CreateQrCode:
    handler: apps/attendance/src/app/lambda/http/createQrCode.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QR_CODES_TABLE}
    events:
      - http:
          method: post
          path: events/{eventId}/qrcodes
          cors: true
          authorizer: Auth

  OnAttendeeSignup:
    handler: apps/attendance/src/app/lambda/dynamodb/onAttendeeSignup.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ses:GetTemplate
          - ses:CreateTemplate
          - ses:UpdateTemplate
          - ses:SendTemplatedEmail
        Resource: ['*']
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt AttendeesDynamoDBTable.StreamArn
  SendAttendeeSignupEmail:
    handler: apps/attendance/src/app/lambda/http/sendSignupEmail.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ses:GetTemplate
          - ses:CreateTemplate
          - ses:UpdateTemplate
          - ses:SendTemplatedEmail
        Resource: ['*']
    events:
      - http:
          method: post
          path: sendSignupEmail
          cors: true
          authorizer: Auth
  UpdateEmailTemplate:
    handler: apps/attendance/src/app/lambda/http/updateEmailTemplate.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ses:GetTemplate
          - ses:CreateTemplate
          - ses:UpdateTemplate
          - ses:SendTemplatedEmail
        Resource: ['*']
    events:
      - http:
          method: put
          path: updateEmailTemplate
          cors: true
          authorizer: Auth

  GenerateUploadUrl:
    handler: apps/attendance/src/app/lambda/http/generateUploadUrl.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: '*'
    events:
      - http:
          method: post
          path: events/{eventId}/attachment
          cors: true
          authorizer: Auth
          documentation:
            summary: Return a presigned URL
            description: Return a presigned URL to upload a file for an EVENT item with the provided eventId

resources:
  Resources:
    EventsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: eventId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: eventId
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.EVENTS_TABLE}

    ImagesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S

        KeySchema:
          - AttributeName: eventId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE

        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.IMAGES_TABLE}

    AttendeesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: attendeeId
            AttributeType: S
        KeySchema:
          - AttributeName: eventId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.ATTENDEES_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.ATTENDEE_ID_INDEX}
            KeySchema:
              - AttributeName: attendeeId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    QrCodesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: qrCodeId
            AttributeType: S
        KeySchema:
          - AttributeName: eventId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        TimeToLiveSpecification:
          Enabled: true
          AttributeName: 'expiration'
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.QR_CODES_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.QR_CODE_ID_INDEX}
            KeySchema:
              - AttributeName: qrCodeId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadWriteBucketPolicy
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
        Bucket: !Ref AttachmentsBucket

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
